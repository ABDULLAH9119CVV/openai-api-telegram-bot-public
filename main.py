#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from datetime import datetime
from pytz import timezone
from telebot import types
from telebot import util
from sys import platform
import requests
import telebot
import random
import openai
import shutil
import pydub
import time
import sys
import os

from botapiconfig import openaiapi, telegrambotapi, session_key

openai.api_key = openaiapi
bot = telebot.TeleBot(telegrambotapi)

last_messages_chatgpt = {}
last_messages_dalletwo = {}
last_whisper = {}

start_time = time.time()

botname = "avencoreschatgpt_bot"

timebot = "Europe/Moscow"

stickerstart = "stickers/hjkhjkhjkuiy.gif"

adminsid = ['872108002', '1087968824']

q,w,e,r,t,y,u,i,o,p  = ['dhfdhdfhf.webp', 'fgjgfjfgj.webp', 'fhfdhfdh.webp', 'fjfgjurturt.webp', 'hdfhdfhdfh.webp', 'rtutrurtutru.webp', 'sticker.webp', 'sticker-animenazi.webp', 'trutrutrur.webp', 'urturturtutru.webp', 'rutrutrutrurt.webp', 'jfjfgjfgjg.webp', 'fjgfjfgjgfj.webp', 'jfgjturtur.webp', 'rtutrurtjfgj.webp', 'urturutrurt.webp']
numbers = (q,w,e,r,t,y,u,i,o,p)

def mainstarter():
    @bot.message_handler(commands=['start'])
    def start_message(message):
        if message.chat.type != 'private':
            if message.text.lower() == "/start":
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markdown = """üö® *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï*: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ `/start` –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ *–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö* —Å –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–º—É –ø—Ä–∞–≤–∏–ª—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"""
                markup.add(button1)
                markup.add(button2)
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            elif message.text.lower() == f"/start@{botname}":
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markdown = f"""üö® *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï*: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ `/start@{botname}` –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ *–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö* —Å –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–º—É –ø—Ä–∞–≤–∏–ª—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"""
                markup.add(button1)
                markup.add(button2)
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")
            return
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.InlineKeyboardButton("–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
        button2 = types.InlineKeyboardButton("–ú–æ–∏ —á–∞—Ç—ã")
        button3 = types.InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –º–æ–Ω–µ—Ç–æ–π")
        button4 = types.InlineKeyboardButton("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        button5 = types.InlineKeyboardButton("–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥")
        button6 = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
        markup.add(button1, button2, button3, button4, button5, button6)
        random_number = random.choice(numbers)
        sticker = open(f"stickers/{random_number}", "rb")
        bot.send_sticker(message.chat.id, sticker)
        markdown = """–ü—Ä–∏–≤–µ—Ç –¥—Ä—É–≥! üëã\n\n–î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ ChatGPT, DALLE-2 –∏ Whisper. üíª\n\n–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –∫ —Å–µ–±–µ –≤ —á–∞—Ç –∏ —Ç–∞–∫ –∂–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–æ—Ç–∞ –±—É–¥—É—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã —Å—Ä–∞–∑—É. ü§ñ\n\n*–ß—Ç–æ —Ç–∞–∫–æ–µ ChatGPT?* ‚ùì\nChatGPT - —ç—Ç–æ –º–æ–¥–µ–ª—å —è–∑—ã–∫–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è OpenAI. –û–Ω–∞ –±—ã–ª–∞ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è–∑—ã–∫–∞. üí°\n\n*–ß—Ç–æ —Ç–∞–∫–æ–µ DALLE-2?* ‚ùì\nDALLE-2 - —ç—Ç–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, —Å–æ–∑–¥–∞–Ω–Ω–∞—è OpenAI, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞. üí°\n\n*–ß—Ç–æ —Ç–∞–∫–æ–µ Whisper?* ‚ùì\nWhisper - —ç—Ç–æ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç.\n\n*–ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ChatGPT?* ‚ùì\n–õ–µ–≥–∫–æ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /chatgpt –í–ê–®-–ó–ê–ü–†–û–° üòâ\n\n*–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç DALLE-2?* ‚ùì\n–õ–µ–≥–∫–æ! –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /dalle2 –í–ê–®-–ó–ê–ü–†–û–° üòâ\n\n*–ö–∞–∫ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Whisper?* ‚ùì\n–õ–µ–≥–∫–æ! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É üòâ"""
        bot.send_message(message.chat.id, markdown, reply_markup=markup, parse_mode="Markdown")

    @bot.message_handler(commands=['dalle2'])
    def dalletwo(message):
        if message.text.lower() == f"/dalle2@{botname}":
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
            button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
            markdown = f"""üö´ *–û—à–∏–±–∫–∞:* –ö–æ–º–∞–Ω–¥–∞ `/dalle2@{botname}` –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—É—Å—Ç–æ–π, –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/dalle2@{botname}`, —á—Ç–æ–±—ã DALLE-2 –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. ü§ñ"""
            markup.add(button1)
            markup.add(button2)
            bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")
        if message.text.lower() == "/dalle2":
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
            button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
            markdown = """üö´ *–û—à–∏–±–∫–∞*: –ö–æ–º–∞–Ω–¥–∞ `/dalle2` –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—É—Å—Ç–æ–π, –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/dalle2`, —á—Ç–æ–±—ã DALLE-2 –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. ü§ñ"""
            markup.add(button1)
            markup.add(button2)
            bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")
        elif len(message.text.split(maxsplit=1)[1]) > 500:
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
            button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
            markdown = "üö´ *–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è - 500 —Å–∏–º–≤–æ–ª–æ–≤.*"
            markup.add(button1)
            markup.add(button2)
            bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")
        elif message.chat.id in last_messages_dalletwo and time.time() - last_messages_dalletwo[message.chat.id] < 30:
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
            button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
            markdown = "üö´ *–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.*"
            markup.add(button1)
            markup.add(button2)
            bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")
        else:

            if message.from_user.id in last_messages_dalletwo:
                elapsed_time = time.time() - last_messages_dalletwo[message.from_user.id]
                if elapsed_time < 30:
                    time.sleep(30 - elapsed_time)

            msg = bot.reply_to(message, "üîé –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

            try:
                response = openai.Image.create(
                    prompt=message.text,
                    n=1,
                    size="1024x1024"
                )

                username = message.from_user.first_name
                output = response['data'][0]['url']
                inputuser = message.text.split(maxsplit=1)[1]
                bot.delete_message(message.chat.id, msg.message_id)
                bot.reply_to(message, text="‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")


                bot.send_message(message.chat.id, text=f"üë® *–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º*: `{username}`\n\nüéà *–ê–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è*: `{message.message_id}`\n\nü§î *–ó–∞–ø—Ä–æ—Å*: `{inputuser}`\n\nüëæ *–û—Ç–≤–µ—Ç –æ—Ç DALLE-2*: [–∫–∞—Ä—Ç–∏–Ω–∫–∞ –æ—Ç DALLE-2]({output})", parse_mode="Markdown")


                message_date = datetime.fromtimestamp(message.date, timezone(timebot))
                message_date_string = message_date.strftime('%Y-%m-%d %H:%M:%S')

                f = open("chatlog.txt", "a")
                f.writelines('---------------------------------------------------------------------------')
                f.writelines('\n')
                f.writelines('Model: DALLE-2')
                f.writelines('\n')
                f.writelines(f'ChatID: {message.chat.id}')
                f.writelines('\n')
                f.writelines(f'MessageID: {message.message_id}')
                f.writelines('\n')
                f.writelines(f'UserID: {message.from_user.id}')
                f.writelines('\n')
                f.writelines(f'Username: {message.from_user.username}')
                f.writelines('\n')
                f.writelines(f'Date and Time: {message_date_string}')
                f.writelines('\n')
                f.writelines(f'Prompt: {message.text.split(maxsplit=1)[1]}')
                f.writelines('\n')
                f.writelines(f'AI reply: {output}')
                f.writelines('\n')
                f.writelines('---------------------------------------------------------------------------')
                f.writelines('\n\n')
                f.close

            except openai.error.Timeout as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *OpenAI API –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.APIError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *OpenAI API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É API*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.APIConnectionError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI API*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.InvalidRequestError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *OpenAI API –∑–∞–ø—Ä–æ—Å –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.AuthenticationError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *OpenAI API –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.PermissionError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *–ó–∞–ø—Ä–æ—Å OpenAI API –Ω–µ –±—ã–ª —Ä–∞–∑—Ä–µ—à–µ–Ω*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.RateLimitError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã OpenAI API*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            last_messages_dalletwo[message.chat.id] = time.time()

    @bot.message_handler(commands=['chatgpt'])
    def chatgpt(message):
        if message.text.lower() == f"/chatgpt@{botname}":
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
            button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
            markdown = f"""üö´ *–û—à–∏–±–∫–∞*: –ö–æ–º–∞–Ω–¥–∞ `/chatgpt@{botname}` –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—É—Å—Ç–æ–π, –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/chatgpt@{botname}`, —á—Ç–æ–±—ã ChatGPT –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. ü§ñ"""
            markup.add(button1)
            markup.add(button2)
            bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")
        if message.text.lower() == "/chatgpt":
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
            button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
            markdown = """üö´ *–û—à–∏–±–∫–∞*: –ö–æ–º–∞–Ω–¥–∞ `/chatgpt` –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—É—Å—Ç–æ–π, –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/chatgpt`, —á—Ç–æ–±—ã ChatGPT –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –∫ –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. ü§ñ"""
            markup.add(button1)
            markup.add(button2)
            bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")
        elif len(message.text.split(maxsplit=1)[1]) > 500:
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
            button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
            markdown = "üö´ *–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è - 500 —Å–∏–º–≤–æ–ª–æ–≤.*"
            markup.add(button1)
            markup.add(button2)
            bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")
        elif message.chat.id in last_messages_chatgpt and time.time() - last_messages_chatgpt[message.chat.id] < 30:
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
            button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
            markdown = "üö´ *–°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.*"
            markup.add(button1)
            markup.add(button2)
            bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")
        else:

            if message.from_user.id in last_messages_chatgpt:
                elapsed_time = time.time() - last_messages_chatgpt[message.from_user.id]
                if elapsed_time < 30:
                    time.sleep(30 - elapsed_time)

            msg = bot.reply_to(message, "üîé –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[{"role": "user", "content": message.text}],
                )

                total_tokens = response['usage']['total_tokens']
                output = response["choices"][0]["message"]["content"]
                username = message.from_user.first_name
                inputuser = message.text.split(maxsplit=1)[1]
                bot.delete_message(message.chat.id, msg.message_id)
                bot.reply_to(message, text="‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")


                if 'output' in locals():
                    splitted_text = util.smart_split(output, chars_per_string=2000)
                    for text in splitted_text:
                        bot.send_message(message.chat.id, text=f"üë® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {username}\n\nüéà –ê–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}\n\nüí∞ –ó–∞—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}\n\nü§î –ó–∞–ø—Ä–æ—Å: {inputuser}\n\nüëæ –û—Ç–≤–µ—Ç –æ—Ç ChatGPT: {text}")


                message_date = datetime.fromtimestamp(message.date, timezone(timebot))
                message_date_string = message_date.strftime('%Y-%m-%d %H:%M:%S')

                f = open("chatlog.txt", "a")
                f.writelines('---------------------------------------------------------------------------')
                f.writelines('\n')
                f.writelines('Model: ChatGPT')
                f.writelines('\n')
                f.writelines(f'Tokens used: {total_tokens}')
                f.writelines('\n')
                f.writelines(f'ChatID: {message.chat.id}')
                f.writelines('\n')
                f.writelines(f'MessageID: {message.message_id}')
                f.writelines('\n')
                f.writelines(f'UserID: {message.from_user.id}')
                f.writelines('\n')
                f.writelines(f'Username: {message.from_user.username}')
                f.writelines('\n')
                f.writelines(f'Date and Time: {message_date_string}')
                f.writelines('\n')
                f.writelines(f'Prompt: {message.text.split(maxsplit=1)[1]}')
                f.writelines('\n')
                f.writelines(f'AI reply: {output}')
                f.writelines('\n')
                f.writelines('---------------------------------------------------------------------------')
                f.writelines('\n\n')
                f.close

            except openai.error.Timeout as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *OpenAI API –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.APIError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *OpenAI API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É API*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.APIConnectionError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI API*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.InvalidRequestError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *OpenAI API –∑–∞–ø—Ä–æ—Å –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.AuthenticationError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *OpenAI API –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.PermissionError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *–ó–∞–ø—Ä–æ—Å OpenAI API –Ω–µ –±—ã–ª —Ä–∞–∑—Ä–µ—à–µ–Ω*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            except openai.error.RateLimitError as e:
                print(e)
                bot.delete_message(message.chat.id, msg.message_id)
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                markdown = f"‚ùå *–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã OpenAI API*: `{e}`"
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            last_messages_chatgpt[message.chat.id] = time.time()

    @bot.message_handler(commands=['log'])
    def logsend(message):
        if message.chat.type == 'private':
            if str(message.from_user.id) in adminsid:
                if os.path.isfile("chatlog.txt"):
                    markup = types.InlineKeyboardMarkup()
                    button1 = types.InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª–æ–≥!", callback_data="yesdownload")
                    button2 = types.InlineKeyboardButton("‚ùå –ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª!", callback_data="delerrorandmsguser")
                    markup.add(button1)
                    markup.add(button2)
                    bot.send_message(message.chat.id, text="ü§î *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –ª–æ–≥–∏?*", reply_markup=markup, parse_mode="Markdown")
                else:
                    markup = types.InlineKeyboardMarkup()
                    button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                    button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delerrorandmsguser")
                    markup.add(button1)
                    markup.add(button2)
                    bot.send_message(message.chat.id, text="‚ùå *–£–≤—ã, –Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É –ª–æ–≥–æ–≤!*", reply_markup=markup, parse_mode="Markdown")
            else:
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                bot.send_message(message.chat.id, text="‚ùå *–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!*", reply_markup=markup, parse_mode="Markdown")
        elif message.chat.type in ['group', 'supergroup']:
            if message.text.lower() == "/log":
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markdown = """üö® *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï*: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ `/log` –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ *–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö* —Å –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–º—É –ø—Ä–∞–≤–∏–ª—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"""
                markup.add(button1)
                markup.add(button2)
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

            elif message.text.lower() == f"/log@{botname}":
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                markdown = f"""üö® *–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï*: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ `/log@{botname}` –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ *–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö* —Å –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ –∫–∞–Ω–∞–ª–∞—Ö –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.

üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–º—É –ø—Ä–∞–≤–∏–ª—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª—é–±—ã—Ö –ø—Ä–æ–±–ª–µ–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"""
                markup.add(button1)
                markup.add(button2)
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

    @bot.message_handler(commands=['id'])
    def logsend(message):
        message_date = datetime.fromtimestamp(message.date, timezone(timebot))
        message_date_string = message_date.strftime('%Y-%m-%d %H:%M:%S')
        if message.chat.type == 'private':
            if str(message.from_user.id) in adminsid:
                markdown = f"*–í–∞—à –∞–π–¥–∏*: `{message.from_user.id}`\n*–ê–π–¥–∏ —á–∞—Ç–∞*: `{message.chat.id}`\n*–í–∞—à username*: `{message.from_user.username}`\n*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ*: `{message_date_string}`\n*–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*: `–î–∞`"
                bot.send_message(message.chat.id, text=markdown, parse_mode="Markdown")
            else:
                markdown = f"*–í–∞—à –∞–π–¥–∏*: `{message.from_user.id}`\n*–ê–π–¥–∏ —á–∞—Ç–∞*: `{message.chat.id}`\n*–í–∞—à username*: `{message.from_user.username}`\n*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ*: `{message_date_string}`\n*–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*: `–î–∞`"
                bot.send_message(message.chat.id, text=markdown, parse_mode="Markdown")
        elif message.chat.type in ['group', 'supergroup']:
            if str(message.from_user.id) in adminsid:
                markdown = f"*–í–∞—à –∞–π–¥–∏*: `{message.from_user.id}`\n*–ê–π–¥–∏ –±–µ—Å–µ–¥—ã*: `{message.chat.id}`\n*–í–∞—à username*: `{message.from_user.username}`\n*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ*: `{message_date_string}`\n*–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*: `–î–∞`"
                bot.send_message(message.chat.id, text=markdown, parse_mode="Markdown")
            else:
                markdown = f"*–í–∞—à –∞–π–¥–∏*: `{message.from_user.id}`\n*–ê–π–¥–∏ –±–µ—Å–µ–¥—ã*: `{message.chat.id}`\n*–í–∞—à username*: `{message.from_user.username}`\n*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ*: `{message_date_string}`\n*–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*: `–î–∞`"
                bot.send_message(message.chat.id, text=markdown, parse_mode="Markdown")


    @bot.message_handler(content_types=['voice'])
    def save_voice(message):
        if message.chat.type == 'private':
            if message.chat.id in last_whisper and time.time() - last_whisper[message.chat.id] < 30:
                markup = types.InlineKeyboardMarkup()
                button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delerrorandmsguser")
                markup.add(button1)
                markup.add(button2)
                bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")
            else: 
                
                if message.voice.file_id in last_whisper:
                    elapsed_time = time.time() - last_whisper[message.voice.file_id]
                    if elapsed_time < 30:
                        time.sleep(30 - elapsed_time)

                msg = bot.reply_to(message, "üîé –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

                file_info = bot.get_file(message.voice.file_id)
                file_path = file_info.file_path

                downloaded_file = bot.download_file(file_path)

                try:
                    os.mkdir("voices")
                except:
                    pass

                file_name = 'voice{}.ogg'.format(message.message_id)
                file_path = os.path.join('voices', file_name)

                with open(file_path, 'wb') as f:
                    f.write(downloaded_file)
                    f.close()

                try:
                    sound = pydub.AudioSegment.from_file(f"voices/voice{message.message_id}.ogg", format="ogg")
                    sound.export(f"voices/voice{message.message_id}.mp3", format="mp3")

                    try:
                        os.remove("voices/voicelove.mp3")
                    except:
                        pass

                    one = f"voices/voice{message.message_id}.mp3"
                    two = "voices/voicelove.mp3"
                    shutil.copyfile(one, two)
                    fileaudio = open("voices/voicelove.mp3", "rb")
                    response = openai.Audio.transcribe("whisper-1", fileaudio)
                    fileaudio.close()

                    username = message.from_user.first_name
                    bot.delete_message(message.chat.id, msg.message_id)
                    bot.reply_to(message, text="‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                    sendmsg = response["text"]


                    if 'sendmsg' in locals():
                        splitted_text = util.smart_split(sendmsg, chars_per_string=2000)
                        for text in splitted_text:
                                bot.send_message(message.chat.id, text=f"üë® *–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º*: `{username}`\n\nüéà *–ê–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏—è*: `{message.message_id}`\n\nüëæ *–û—Ç–≤–µ—Ç –æ—Ç Whisper*: {text}", parse_mode="Markdown")


                    message_date = datetime.fromtimestamp(message.date, timezone(timebot))
                    message_date_string = message_date.strftime('%Y-%m-%d %H:%M:%S')

                    f = open("chatlog.txt", "a")
                    f.writelines('---------------------------------------------------------------------------')
                    f.writelines('\n')
                    f.writelines('Model: Whisper')
                    f.writelines('\n')
                    f.writelines(f'ChatID: {message.chat.id}')
                    f.writelines('\n')
                    f.writelines(f'MessageID: {message.message_id}')
                    f.writelines('\n')
                    f.writelines(f'UserID: {message.from_user.id}')
                    f.writelines('\n')
                    f.writelines(f'Username: {message.from_user.username}')
                    f.writelines('\n')
                    f.writelines(f'Date and Time: {message_date_string}')
                    f.writelines('\n')
                    f.writelines(f'AI reply: {sendmsg}')
                    f.writelines('\n')
                    f.writelines('---------------------------------------------------------------------------')
                    f.writelines('\n\n')
                    f.close

                    shutil.rmtree("voices")

                except openai.error.Timeout as e:
                    shutil.rmtree("voices")
                    print(e)
                    bot.delete_message(message.chat.id, msg.message_id)
                    markup = types.InlineKeyboardMarkup()
                    button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                    button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                    markup.add(button1)
                    markup.add(button2)
                    markdown = f"‚ùå *OpenAI API –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å*: `{e}`"
                    bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

                except openai.error.APIError as e:
                    shutil.rmtree("voices")
                    print(e)
                    bot.delete_message(message.chat.id, msg.message_id)
                    markup = types.InlineKeyboardMarkup()
                    button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                    button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                    markup.add(button1)
                    markup.add(button2)
                    markdown = f"‚ùå *OpenAI API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É API*: `{e}`"
                    bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

                except openai.error.APIConnectionError as e:
                    shutil.rmtree("voices")
                    print(e)
                    bot.delete_message(message.chat.id, msg.message_id)
                    markup = types.InlineKeyboardMarkup()
                    button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                    button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                    markup.add(button1)
                    markup.add(button2)
                    markdown = f"‚ùå *–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI API*: `{e}`"
                    bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

                except openai.error.InvalidRequestError as e:
                    shutil.rmtree("voices")
                    print(e)
                    bot.delete_message(message.chat.id, msg.message_id)
                    markup = types.InlineKeyboardMarkup()
                    button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                    button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                    markup.add(button1)
                    markup.add(button2)
                    markdown = f"‚ùå *OpenAI API –∑–∞–ø—Ä–æ—Å –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º*: `{e}`"
                    bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

                except openai.error.AuthenticationError as e:
                    shutil.rmtree("voices")
                    print(e)
                    bot.delete_message(message.chat.id, msg.message_id)
                    markup = types.InlineKeyboardMarkup()
                    button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                    button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                    markup.add(button1)
                    markup.add(button2)
                    markdown = f"‚ùå *OpenAI API –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω*: `{e}`"
                    bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

                except openai.error.PermissionError as e:
                    shutil.rmtree("voices")
                    print(e)
                    bot.delete_message(message.chat.id, msg.message_id)
                    markup = types.InlineKeyboardMarkup()
                    button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                    button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                    markup.add(button1)
                    markup.add(button2)
                    markdown = f"‚ùå *–ó–∞–ø—Ä–æ—Å OpenAI API –Ω–µ –±—ã–ª —Ä–∞–∑—Ä–µ—à–µ–Ω*: `{e}`"
                    bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

                except openai.error.RateLimitError as e:
                    shutil.rmtree("voices")
                    print(e)
                    bot.delete_message(message.chat.id, msg.message_id)
                    markup = types.InlineKeyboardMarkup()
                    button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
                    button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
                    markup.add(button1)
                    markup.add(button2)
                    markdown = f"‚ùå *–ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã OpenAI API*: `{e}`"
                    bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

                last_whisper[message.chat.id] = time.time()

        elif message.chat.type in ['group', 'supergroup']:
            pass

    @bot.message_handler(content_types=['text'])
    def send_text(message):
        if message.chat.type != 'private':
            return
        if message.text.lower() == "–º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã":
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–ì—Ä—É–ø–ø–∞ VK", url="https://vk.com/chatgptcontent")
            button2 = types.InlineKeyboardButton("Telegram –∫–∞–Ω–∞–ª", url="https://t.me/hzfnews")
            markup.add(button1, button2)
            markdown = """*–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –í–ö –∏ Telegram –∫–∞–Ω–∞–ª üì¢*

–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ –∫–∞–Ω–∞–ª–µ –≤ Telegram! üîç –¢–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö, –∞–Ω–æ–Ω—Å–∞—Ö –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –∞ —Ç–∞–∫–∂–µ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. üí¨

–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ–±–∞ –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º. ü§ñ

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üôè"""
            bot.send_message(message.chat.id, markdown, reply_markup=markup, parse_mode="Markdown")

        elif message.text.lower() == "–ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –º–æ–Ω–µ—Ç–æ–π":
            markdown = """ *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –º–æ–Ω–µ—Ç–æ–π üí∞*

–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç, –º—ã –±—É–¥–µ–º –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –ª—é–±—É—é –ø–æ–º–æ—â—å.

–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–æ–Ω–∞—Ç –Ω–∞—à–µ–º—É –ø—Ä–æ–µ–∫—Ç—É —á–µ—Ä–µ–∑ —Å–ª–µ–¥—É—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:

*QIWI*: [–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è](https://qiwi.com/n/AVENCORESDONATE) üí≥
*–°–±–µ—Ä*: `2202 2050 7215 4401` üíµ
*–í–¢–ë*: `2200 2404 1001 8580` üí∂

–í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. üöÄ

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè"""
            bot.send_message(message.chat.id, markdown, parse_mode="Markdown")

        elif message.text.lower() == "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞":
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("–Ø –≤ VK", url="https://vk.com/avencores")
            button2 = types.InlineKeyboardButton("–Ø –≤ Telegram", url="https://t.me/avencores")
            markup.add(button1, button2)
            markdown = """*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†Ô∏è*

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–≤–æ–¥—É –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º.

–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ —á–µ—Ä–µ–∑ –Ω–∞—à–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É. üëá

–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã. üí¨

–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! üôè"""
            bot.send_message(message.chat.id, markdown, reply_markup=markup, parse_mode="Markdown")

        elif message.text.lower() == "—Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞":
            url = "https://api.openai.com/dashboard/billing/credit_grants"
            headers = {
                "Content-Type": "application/json",
                f"Authorization": f"Bearer {session_key}"
            }

            response = requests.get(url, headers=headers)
            data = response.json()
            balance = data['total_used']
            totalbalance = data['total_granted']
            totalavailable = data['total_available']

            pyver = sys.version.split()[0]
            current_time = time.time()
            uptime = int(current_time - start_time)
            uptime_str = f"{uptime // (24 * 3600)} –¥–µ–Ω—å(-–Ω–µ–π), {uptime // 3600 % 24} —á–∞—Å(-–æ–≤), {uptime // 60 % 60} –º–∏–Ω—É—Ç(-–∞), {uptime % 60} —Å–µ–∫—É–Ω–¥(-–∞)"
            markdown = datetime.now().strftime(f"""*–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ.* ü§ñ\n
*–í—Ä–µ–º—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ*: `%H:%M:%S` ‚è∞
*–î–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ*: `%d.%m.%y` üìÖ

*–û–±—â–∏–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞*: üí∏`{totalbalance}`
*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞*: üí∏`{balance}`
*–û—Å—Ç–∞–ª–æ—Å—å –¥–µ–Ω–µ–≥ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ —Ç–æ–∫–µ–Ω–∞*: üí∏`{totalavailable}`

*–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ*: `{platform}` üíª
*–í–µ—Ä—Å–∏—è Python –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ*: `{pyver}` üêç
*–ê–ø—Ç–∞–π–º –±–æ—Ç–∞*: `{uptime_str}` ‚åõ""")
            bot.send_message(message.chat.id, markdown, parse_mode="Markdown")

        elif message.text.lower() == "–∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥":
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("GitHub Page", url="https://github.com/AvenCores/openai-api-telegram-bot-public")
            button2 = types.InlineKeyboardButton("Full GNU GPL V3", url="https://www.gnu.org/licenses/quick-guide-gplv3.ru.html")
            markdown = """‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ* ‚ö†Ô∏è

–î–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ–¥ –ª–∏—Ü–µ–Ω–∑–∏–µ–π GNU GPL 3. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–æ —Å–≤–æ–±–æ–¥–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –∏ –∏–∑–º–µ–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –≤—Å–µ –≤–∞—à–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å—Å—è –ø–æ–¥ —Ç–æ–π –∂–µ –ª–∏—Ü–µ–Ω–∑–∏–µ–π. üÜì

–ú—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å —É–≤–∞–∂–∞—Ç—å –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –±–æ—Ç –≤ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö. –ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏ GNU GPL 3, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ. ‚ùå

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —É–≤–∞–∂–µ–Ω–∏–µ –∫ –ø—Ä–∞–≤–∞–º –∞–≤—Ç–æ—Ä–æ–≤! üôè"""
            markup.add(button1, button2)
            bot.send_message(message.chat.id, markdown, reply_markup=markup, parse_mode="Markdown")

        elif message.text.lower() == "–º–æ–∏ —á–∞—Ç—ã":
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("Telegram Chat", url="https://t.me/+MDOUaUZzWlEwNjRi")
            button2 = types.InlineKeyboardButton("VK Chat", url="https://vk.me/join/VqYKejk4a/QQvIXq6DhW6huxyAJ/A7cCiD4=")
            markdown = """üì£ *–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É Telegram –∏ VK —á–∞—Ç—É!* üöÄ

üë• –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å–º–æ–∂–µ—Ç–µ –æ–±—Å—É–∂–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã, –¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.

üí¨ –û–±—â–µ–Ω–∏–µ —Å –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–µ–π –Ω–∞—Ö–æ–¥–∫–æ–π! –ê –µ—â–µ —É –Ω–∞—Å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—É—á–∏—Ç—å—Å—è –Ω–æ–≤—ã–º –Ω–∞–≤—ã–∫–∞–º –∏ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–≤–æ–π –∫—Ä—É–≥–æ–∑–æ—Ä.

üëâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –æ–±—Å—É–∂–¥–µ–Ω–∏—è! üíªüì±"""
            markup.add(button1, button2)
            bot.send_message(message.chat.id, markdown, reply_markup=markup, parse_mode="Markdown")


        else:
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
            button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å", callback_data="delerrorandmsguser")
            markdown = """‚ùå –û—à–∏–±–∫–∞! –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ü§î

–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç Telegram –±–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start üëâüëÄ

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞ ü§ó

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ! üôè"""
            markup.add(button1)
            markup.add(button2)
            bot.reply_to(message, text=markdown, reply_markup=markup, parse_mode="Markdown")

    @bot.callback_query_handler(func=lambda call: call.data == "dellthiserror")
    def dellthiserror(call):
        bot.answer_callback_query(callback_query_id=call.id, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    @bot.callback_query_handler(func=lambda call: call.data == "delerrorandmsguser")
    def delerrorandmsguser(call):
        bot.answer_callback_query(callback_query_id=call.id, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 1)

    @bot.callback_query_handler(func=lambda call: call.data == "delerrorandmsguserbot")
    def delerrorandmsguserbot(call):
        bot.answer_callback_query(callback_query_id=call.id, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id - 2)

    @bot.callback_query_handler(func=lambda call: call.data == "yesdownload")
    def yesdownload(call):
        try:
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            bot.answer_callback_query(callback_query_id=call.id, text="–õ–æ–≥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            with open('chatlog.txt', 'rb') as log_file:
                bot.send_document(chat_id=call.message.chat.id, document=log_file, caption="üìÉ –≠—Ç–æ –≤—Å–µ –ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç —É—Å–ø–µ–ª —Å–æ–±—Ä–∞—Ç—å –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                log_file.close()
            os.remove("chatlog.txt")
        except Exception as e:
            print(e)
            bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton("C–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="dellthiserror")
            button2 = types.InlineKeyboardButton("–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delerrorandmsguserbot")
            markup.add(button1)
            markup.add(button2)
            bot.send_message(chat_id=call.message.chat.id, text=f"‚ùå *–§–∞–π–ª –ª–æ–≥–æ–≤ –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ –æ—à–∏–±–∫–µ*: {e}", reply_markup=markup, parse_mode="Markdown")

    bot.polling(none_stop=True)


while True:
    try:
        mainstarter()
    except Exception as e:
        print(e)
        continue
